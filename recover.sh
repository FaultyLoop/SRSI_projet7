#!/usr/bin/env bash

#CONFIG - DEFAULT
ENCRY_MODE=aes256       #Encrypt Mode
FHASH_MODE=md5          #File (splited) Hash (checksum) md5
FHASH_NAME=true         #File (splited) Rename as <hashed-value>
LOG_STDERR=2            #Stderr
LOG_STDOUT=1            #Stdout
VERBOSE_LV=0            #Verbose Level
WORK_SPACE=`realpath .` #Sctipt Workplace (default .)
IPCHAINFILE=./chainip	#Ip list of chain server
USERACCESS=srsi7

#CONFIG - CONSTANT
LOG_MODEDV=vars         #Log Modifier Var Values
LOG_MODELL=last         #Log Modifier Last Log
LOG_MODENV=ntvr         #Log Modifier Not a Var
LOG_MODESL=same         #Log Modifier Same Line (\r)
LOG_STADBG=debug        #Log Status Debug
LOG_STAERR=error        #Log Status Error
LOG_STAINF=info         #Log Status Info
LOG_STAWRN=warn         #Log Status Warn
LOG_STASET=vset         #Log Status Set

#INTERRUPTS

#MAIN   - FUNCTION

getiplike(){
	#Support <username>@<ip>
	echo $(echo $1 | grep -E -o "([a-zA-Z0-9_]+@)?((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)")
}

checkserverchain() {
	if [[ -f $IPCHAINFILE ]] && [[ -z $IPCHAIN ]];then
		IPCHAIN=$(echo $IPCHAIN && cat $IPCHAINFILE)
		IPCHAIN=$(getiplike "$IPCHAIN")
	fi
	if [[ -z $IPCHAIN ]];then 
		log $LOG_STAERR "Chain Server IP Required"
		exit -1
	fi

	ipchaincopy=$(echo $IPCHAIN | sed "s/;/ /g")
	IPCHAIN=
	log $STA_INF "$(echo $IPCHAIN | wc -l) Chain server set"
	
	if [[ -w $IPCHAINFILE ]] || ([[ ! -d $IPCHAINFILE ]] && [[ ! -f $IPCHAINFILE ]]);then
		if [[ -f $IPCHAINFILE ]];then
			ipcopy=$(cat $IPCHAINFILE | grep -v ^#);
			ipcopy=$(getiplike $ipcopy)
		fi
		echo "#IpList file version 1.0" > $IPCHAINFILE
		echo "#Record : $(date)"       >> $IPCHAINFILE
		echo "#Warning : File autogenerated, edit at own risk !" >> $IPCHAINFILE
		echo "#Failed IP : " 		   >> $IPCHAINFILE
		for ip in $ipchaincopy;do
			if [[ -f $IPCHAINFILE ]] && [[ $(cat $IPCHAINFILE && echo $IPCHAIN) =~ $ip ]];then 
				log $LOG_STAINF "$ip : Duplicate Host, skipping"
				continue
			fi
			log $LOG_STAINF "$ip : Testing Server Access" $LOG_MODESL
			ssh -oBatchMode=yes -oConnectTimeout=3 -ql $USERACCESS $ip exit 0
			if [[ $? -eq 255 ]];then
				if [[ -z $(ssh-keygen -H -F $ip) ]];then 
					log $LOG_STAINF "$ip : Host not set in ~/.ssh/known_hosts"
					if [[ $ipcopy =~ $ip ]];then log $LOG_STAWRN "$ip : Host failure (removing)"
					else echo "#$ip	UNKOWN_HOST" >> $IPCHAINFILE;fi
				else
					log $LOG_STAINF "$ip : Host is down or not responding"
					if [[ $ipcopy =~ $ip ]];then log $LOG_STAWRN "$ip : Host failure (removing)"
					else echo "#$ip	UNJOINABLE" >> $IPCHAINFILE;fi
				fi
			else 
				log $LOG_STAINF "$ip : Host Responding and valid"
				IPCHAIN=$(echo "$IPCHAIN;$ip")
			fi
		done

	fi
	IPCHAIN=$(echo $IPCHAIN | sed "s/;/ /g")
	echo "#Available at Record time" >> $IPCHAINFILE
	for ip in $IPCHAIN;do echo "$ip	OK" >> $IPCHAINFILE;done
	log $STA_INF "$(echo $IPCHAIN | wc -w) Chain server checkedssh"
}

getfileserver() {
	COUNT=0
	for ip in $IPCHAIN;do
		ipget=$(ssh $USERACCESS@$ip -oConnectTimeout=3 "(~/chaincheck.sh --get-fileserver && exit 0) || exit 255")
		if [[ $? -eq 0 ]];then
			log $LOG_STAINF "$(echo $ipget | wc -w) fileserver defined from $ip"
			for ip in $ipget;do 
				if [[ ! $IPFILESERVER =~ $ip ]];then IPFILESERVER=$(echo "$IPFILESERVER;$ip");fi
			done
		else log $LOG_STAERR "Host response invalid";fi
	done
	if [[ -z $IPFILESERVER ]];then
		log $LOG_STAERR "fatal : no fileserver defined"
		exit -3
	fi
	IPFILESERVER=$(echo $IPFILESERVER | sed "s/;/ /g")
	IPFILESERVER=($IPFILESERVER)
}

log(){
  out=$LOG_STDOUT
  headformat=$1
  execformat=""
  tailformat="\n\r";
  case "$1" in
    $LOG_STADBG) headformat="\033[33m$headformat";;
    $LOG_STAERR) headformat="\033[31m$headformat"; out=$LOG_STDERR;;
    $LOG_STAINF) headformat="\033[36m$headformat";;
    $LOG_STAWRN) headformat="\033[31m$headformat";;
    *)           headformat="\033[32m$headformat";;
  esac
  lvl=$1
  msg=$2
  if [[ -z $msg ]];then return ;fi
  shift 2

  if [[ $msg =~ " " ]];then val= ;else val="${!msg}";execformat="\033[32m";fi

  while (( "$#" ));do
    case "$1" in
        $LOG_MODESL) tailformat="\r" ;;
        $LOG_MODESZ) val=$(formatsize $val) ;;
    esac
    shift 1
  done
  
  case "$VERBOSE_LV" in
    0) if [[ $lvl ]];then return ;fi;;
	1|2|3) if ! [[ "$LOG_STAINF,$LOG_STAWRN,$LOG_STAERR" =~ $lvl ]];then return ;fi;;
	4|5|6) if ! [[ "$LOG_STAINF,$LOG_STAWRN,$LOG_STAERR,$LOG_STADBG" =~ $lvl ]];then return ;fi;;
	7|8|9) ;;
  esac

  printf "$headformat \033[39m$msg $execformat$val \033[39m$tailformat"
}

main(){
	if [[ -z $SOURCE ]];then log $LOG_STAERR "Aucune source/fichier à récupere !";exit -1;fi
	if [[ ! -f ./chainip ]];then checkserverchain ;fi
	IPCHAIN=$(echo $IPCHAIN && cat $IPCHAINFILE | grep -v ^#)
	IPCHAIN=$(getiplike "$IPCHAIN")
	if [[ -z $IPCHAIN ]];then log $LOG_STAERR "fatal : No Chainserver ip defined";exit -1;fi
	
	getfileserver
	cd $WORK_SPACE
	log $LOG_STAINF "Getting Index"
	for ip in $IPCHAIN;do
		INDEXS=$(ssh $USERACCESS@$ip "~/chaincheck.sh --list name $([[ $TIMESTAMP ]] && echo "datestamp" || echo "recent") --source $SOURCE")
		INDEXS=($(echo $INDEXS | sed "s/$SOURCE//g"))
		INDEX=
		if [[ $TIMESTAMP ]];then
			for select in ${INDEX[@]};do
				p=5
			done
		else INDEX=${INDEXS[0]};fi
		if [[ -z $INDEX ]];then log $LOG_STAERR "No index Found";exit -1;fi
		log $LOG_STAINF "Fetching Index"
		INDEX=$(ssh $USERACCESS@$ip "~/chaincheck.sh --recover --source $INDEX")
		printf "$INDEX\n" > index
		MD5INDEX=$(cat ./index | grep -v "#" | md5sum | cut -d " " -f1)
		log $LOG_STAINF "Index Registered"
		INDEX=$(cat index | grep -v "^#" | sed 1d | cut -d";" -f1)
		for line in $INDEX;do
			FILE=$(echo $line | cut -d ";" -f 1)
			for ip in ${IPFILESERVER[@]};do
				log $LOG_STADBG "Looking for $FILE in $ip : " $LOG_MODESL
				ssh $USERACCESS@$ip "[[ -f ./files/$FILE ]] && exit 0 || exit 255"
				if [[ $? -eq 0 ]];then
					log $LOG_STADBG "Looking for $FILE in $ip : Success"
					scp -q $USERACCESS@$ip:./files/$FILE ./
					if [[ -f ./$FILE ]];then
						log $LOG_STAINF "Block $FILE : Recovered"
						for ip in $IPCHAIN;do
							ssh $USERACCESS@$ip "~/chaincheck.sh --check-block $FILE --source $MD5INDEX --hash $(md5sum ./$FILE | cut -d ' ' -f1) -vvvvv"
							case "$?" in
								0) log $LOG_STAINF "Block ${FILES[$index]} Verfified";break;;
								1) log $LOG_STAINF "No assigned File Server";;
								2) log $LOG_STAERR "Block ${FILES[$index]} Missing from index";;
								4|5|6) log $LOG_STAERR "Block ${FILES[$index]} Missing block";;
								7) log $LOG_STAERR "Block ${FILES[$index]} Cannot be identified";;
								255) log $LOG_STAERR "SSH ERROR : Connection Failed";;
								*) log $LOG_STAERR "Undefined Error : $?";;
							esac
						done
					else
						log $LOG_STAWRN "Block $FILE : Transfere interrupted"
					fi
				else 
					log $LOG_STADBG "Looking for $FILE in $ip : Failed"
				fi
			done
			
			if [[ ! -f ./$FILE ]];then log $LOG_STAERR "Fragment $FILE Missing !";exit -1;fi
		done
	done
}


#ARGS   - PARSER
while (( "$#" ));do
    case "$1" in
        -h|--help) help $2;exit 0;;
		--chain-server-list) if [[ -f $2 ]];then IPCHAINFILE=$2;fi;;
		-d|--directory) 
			if [[ $2 ]];then
				if [[ ! -d $2 ]] && [[ ! -f $2 ]];then mkdir $2;fi
				WORK_SPACE=$2
			fi
		;;
		-t|--time) TIMESTAMP=$2;;
		-f|--file|-s|--source) SOURCE=$2;;
		-u|--user) USERACCESS=$2;;
        -v*|--verbose)
            if [[ "$1" = "--verbose" ]];then
              if [[ $2 =~ '^[0-9]+$' ]];then VERBOSE_LV=$2; else VERBOSE_LV=1;fi
            else VERBOSE_LV=$((${#1}-1));fi
            log $LOG_STASET VERBOSE_LV
        ;;
        *) ;;
    esac
	shift 1
done

main
